{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { uploadImage } from \"../api\";\nconst Wrapper = styled.div`\n  max-width: 1000px; // 최대 너비 설정\n  width: 90%; // 전체 너비의 90%를 차지하도록 설정\n  margin: 20px auto;\n  margin-top: 180px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`;\nconst Title = styled.h1`\n  margin-top: 15px;\n  color: ${props => props.theme.gray};\n  font-size: 42px;\n  margin-bottom: 15px;\n`;\nconst UploadForm = styled.form`\n  width: 800px;\n  height: 180px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`;\nconst InputButton = styled.div`\n  width: 200px;\n  height: 40px;\n  border: 1px solid #ccc;\n  display: inline-block;\n  padding: 6px 12px;\n  cursor: pointer;\n  background-color: #c3c3c3a2;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 400;\n  transition: 0.3s;\n  color: black;\n  opacity: 0.7;\n  &:hover {\n    opacity: 1;\n  }\n`;\nconst FileLog = styled.div`\n  margin-top: 10px;\n  color: #555;\n  font-style: italic;\n`;\nconst GenerateButton = styled.div`\n  width: 200px;\n  height: 40px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 18px;\n  font-weight: 400;\n  margin-top: 10px;\n  opacity: 0.8;\n  transition: 0.3s;\n  &:hover {\n    opacity: 1;\n  }\n`;\nconst Footer = styled.footer`\n  font-size: 18px;\n  text-align: center;\n  font-weight: 400;\n  color: #007bff;\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\nconst CaptionDisplay = styled.div`\n  color: black; \n  font-size: 16px; \n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\nconst ImagePreview = styled.img`\n  max-width: 95%; // 박스 내부에서 조금 작은 너비로 설정\n  max-height: 300px; // 미리보기 이미지의 최대 높이 설정\n  object-fit: contain; // 이미지 비율을 유지하면서 박스에 맞춤\n  margin-top: 10px;\n`;\nconst FilePreviewContainer = styled.div`\n  border: 1px solid #ddd;\n  padding: 15px;\n  margin-top: 20px;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  width: 100%; // 박스의 너비를 100%로 설정\n  max-width: 700px; // 박스의 최대 너비를 조정\n  text-align: center;\n  box-sizing: border-box; // 패딩을 너비에 포함\n`;\nfunction Upload() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileLog, setFileLog] = useState('No image selected.');\n  const [caption, setCaption] = useState('');\n  const [imagePreviewUrl, setImagePreviewUrl] = useState(null); // 이미지 미리보기 URL 상태\n\n  // const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   const file = event.target.files && event.target.files[0];\n  //   if (file) {\n  //     setSelectedFile(file);\n  //     setFileLog(`Selected Image: ${file.name}`);\n  //   } else {\n  //     setFileLog('No image selected.');\n  //   }\n  // };\n  const handleFileChange = event => {\n    const file = event.target.files && event.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n      setFileLog(`Selected Image: ${file.name}`);\n\n      // 이미지 미리보기 URL 생성\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreviewUrl(reader.result);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setFileLog('No image selected.');\n      setImagePreviewUrl(null); // 이미지 미리보기 URL 초기화\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (selectedFile) {\n      try {\n        const response = await uploadImage(selectedFile);\n        setCaption(response.translated_caption); // 서버로부터 받은 캡션을 상태에 저장\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        setCaption('Failed to generate caption.'); // 오류 발생 시 메시지 설정\n      }\n    } else {\n      alert('Please select an image to upload.');\n    }\n  };\n}\n_s(Upload, \"7UrtgCP0zLmngbXZ1Hy4McDO+mA=\");\n_c = Upload;\nexport default Upload;\nvar _c;\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["useState","styled","uploadImage","Wrapper","div","Title","h1","props","theme","gray","UploadForm","form","InputButton","FileLog","GenerateButton","Footer","footer","CaptionDisplay","ImagePreview","img","FilePreviewContainer","Upload","_s","selectedFile","setSelectedFile","fileLog","setFileLog","caption","setCaption","imagePreviewUrl","setImagePreviewUrl","handleFileChange","event","file","target","files","name","reader","FileReader","onloadend","result","readAsDataURL","handleSubmit","preventDefault","response","translated_caption","error","console","alert","_c","$RefreshReg$"],"sources":["/Users/taegeonkim/2023-2/머신러닝/Project/Algo_app/Algo_NIC/ok-app/src/Routes/Upload.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { uploadImage } from \"../api\";\n\nconst Wrapper = styled.div`\n  max-width: 1000px; // 최대 너비 설정\n  width: 90%; // 전체 너비의 90%를 차지하도록 설정\n  margin: 20px auto;\n  margin-top: 180px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst Title = styled.h1`\n  margin-top: 15px;\n  color: ${(props) => props.theme.gray};\n  font-size: 42px;\n  margin-bottom: 15px;\n`;\n\nconst UploadForm = styled.form`\n  width: 800px;\n  height: 180px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst InputButton = styled.div`\n  width: 200px;\n  height: 40px;\n  border: 1px solid #ccc;\n  display: inline-block;\n  padding: 6px 12px;\n  cursor: pointer;\n  background-color: #c3c3c3a2;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 400;\n  transition: 0.3s;\n  color: black;\n  opacity: 0.7;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst FileLog = styled.div`\n  margin-top: 10px;\n  color: #555;\n  font-style: italic;\n`;\n\nconst GenerateButton = styled.div`\n  width: 200px;\n  height: 40px;\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 18px;\n  font-weight: 400;\n  margin-top: 10px;\n  opacity: 0.8;\n  transition: 0.3s;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst Footer = styled.footer`\n  font-size: 18px;\n  text-align: center;\n  font-weight: 400;\n  color: #007bff;\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst CaptionDisplay = styled.div`\n  color: black; \n  font-size: 16px; \n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\nconst ImagePreview = styled.img`\n  max-width: 95%; // 박스 내부에서 조금 작은 너비로 설정\n  max-height: 300px; // 미리보기 이미지의 최대 높이 설정\n  object-fit: contain; // 이미지 비율을 유지하면서 박스에 맞춤\n  margin-top: 10px;\n`;\n\n\nconst FilePreviewContainer = styled.div`\n  border: 1px solid #ddd;\n  padding: 15px;\n  margin-top: 20px;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  width: 100%; // 박스의 너비를 100%로 설정\n  max-width: 700px; // 박스의 최대 너비를 조정\n  text-align: center;\n  box-sizing: border-box; // 패딩을 너비에 포함\n`;\n\n\n\nfunction Upload() {\n  const [selectedFile, setSelectedFile] = useState<null | File>(null);\n  const [fileLog, setFileLog] = useState('No image selected.');\n  const [caption, setCaption] = useState('');\n  const [imagePreviewUrl, setImagePreviewUrl] = useState<string | null>(null); // 이미지 미리보기 URL 상태\n\n\n  // const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   const file = event.target.files && event.target.files[0];\n  //   if (file) {\n  //     setSelectedFile(file);\n  //     setFileLog(`Selected Image: ${file.name}`);\n  //   } else {\n  //     setFileLog('No image selected.');\n  //   }\n  // };\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files && event.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n      setFileLog(`Selected Image: ${file.name}`);\n\n      // 이미지 미리보기 URL 생성\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreviewUrl(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setFileLog('No image selected.');\n      setImagePreviewUrl(null); // 이미지 미리보기 URL 초기화\n    }\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (selectedFile) {\n      try {\n        const response = await uploadImage(selectedFile);\n        setCaption(response.translated_caption); // 서버로부터 받은 캡션을 상태에 저장\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        setCaption('Failed to generate caption.'); // 오류 발생 시 메시지 설정\n      }\n    } else {\n      alert('Please select an image to upload.');\n    }\n  };\n\n    \n}\n\nexport default Upload ;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,QAAQ,QAAQ;AAEpC,MAAMC,OAAO,GAAGF,MAAM,CAACG,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,KAAK,GAAGJ,MAAM,CAACK,EAAG;AACxB;AACA,WAAYC,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,IAAK;AACvC;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGT,MAAM,CAACU,IAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,WAAW,GAAGX,MAAM,CAACG,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMS,OAAO,GAAGZ,MAAM,CAACG,GAAI;AAC3B;AACA;AACA;AACA,CAAC;AAED,MAAMU,cAAc,GAAGb,MAAM,CAACG,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMW,MAAM,GAAGd,MAAM,CAACe,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAGhB,MAAM,CAACG,GAAI;AAClC;AACA;AACA;AACA;AACA,CAAC;AACD,MAAMc,YAAY,GAAGjB,MAAM,CAACkB,GAAI;AAChC;AACA;AACA;AACA;AACA,CAAC;AAGD,MAAMC,oBAAoB,GAAGnB,MAAM,CAACG,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAID,SAASiB,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAc,IAAI,CAAC;EACnE,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,oBAAoB,CAAC;EAC5D,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC6B,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAG7E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM+B,gBAAgB,GAAIC,KAA0C,IAAK;IACvE,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,IAAIH,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACxD,IAAIF,IAAI,EAAE;MACRT,eAAe,CAACS,IAAI,CAAC;MACrBP,UAAU,CAAE,mBAAkBO,IAAI,CAACG,IAAK,EAAC,CAAC;;MAE1C;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACvBT,kBAAkB,CAACO,MAAM,CAACG,MAAgB,CAAC;MAC7C,CAAC;MACDH,MAAM,CAACI,aAAa,CAACR,IAAI,CAAC;IAC5B,CAAC,MAAM;MACLP,UAAU,CAAC,oBAAoB,CAAC;MAChCI,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC;EAED,MAAMY,YAAY,GAAG,MAAOV,KAAuC,IAAK;IACtEA,KAAK,CAACW,cAAc,CAAC,CAAC;IACtB,IAAIpB,YAAY,EAAE;MAChB,IAAI;QACF,MAAMqB,QAAQ,GAAG,MAAM1C,WAAW,CAACqB,YAAY,CAAC;QAChDK,UAAU,CAACgB,QAAQ,CAACC,kBAAkB,CAAC,CAAC,CAAC;MAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9ClB,UAAU,CAAC,6BAA6B,CAAC,CAAC,CAAC;MAC7C;IACF,CAAC,MAAM;MACLoB,KAAK,CAAC,mCAAmC,CAAC;IAC5C;EACF,CAAC;AAGH;AAAC1B,EAAA,CAlDQD,MAAM;AAAA4B,EAAA,GAAN5B,MAAM;AAoDf,eAAeA,MAAM;AAAE,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}