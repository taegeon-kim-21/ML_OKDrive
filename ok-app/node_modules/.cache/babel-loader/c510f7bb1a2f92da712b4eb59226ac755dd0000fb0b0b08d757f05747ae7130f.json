{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    let canSkipHandoff = true;\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n      if (appearId) {\n        canSkipHandoff = false;\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n        valueTransition.syncStart = true;\n      }\n    }\n    let canSkip = canSkipHandoff && valueTarget === value.get();\n    if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n      canSkip = false;\n    }\n    /**\n     * Temporarily disable skipping animations if there's an animation in\n     * progress. Better would be to track the current target of a value\n     * and compare that against valueTarget.\n     */\n    if (value.animation) {\n      canSkip = false;\n    }\n    if (canSkip) continue;\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    const animation = value.animation;\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(() => willChange.remove(key));\n    }\n    animations.push(animation);\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","_ref","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","definition","delay","transitionOverride","type","arguments","length","undefined","transition","getDefaultTransition","transitionEnd","target","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","animationState","getState","value","valueTarget","valueTransition","elapsed","canSkipHandoff","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","syncStart","canSkip","get","getVelocity","velocity","animation","start","shouldReduceMotion","has","add","then","remove","push","Promise","all"],"sources":["/Users/taegeonkim/2023-2/머신러닝/Project/Algo_app/Algo_NIC/ok-app/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let canSkipHandoff = true;\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                canSkipHandoff = false;\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                valueTransition.syncStart = true;\n            }\n        }\n        let canSkip = canSkipHandoff && valueTarget === value.get();\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uCAAuC;AACtE,SAASC,4BAA4B,QAAQ,iCAAiC;AAC9E,SAASC,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,KAAK,QAAQ,2BAA2B;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAAAC,IAAA,EAAoCC,GAAG,EAAE;EAAA,IAAxC;IAAEC,aAAa;IAAEC;EAAe,CAAC,GAAAH,IAAA;EAC3D,MAAMI,WAAW,GAAGF,aAAa,CAACG,cAAc,CAACJ,GAAG,CAAC,IAAIE,cAAc,CAACF,GAAG,CAAC,KAAK,IAAI;EACrFE,cAAc,CAACF,GAAG,CAAC,GAAG,KAAK;EAC3B,OAAOG,WAAW;AACtB;AACA,SAASE,aAAaA,CAACC,aAAa,EAAEC,UAAU,EAAgD;EAAA,IAA9C;IAAEC,KAAK,GAAG,CAAC;IAAEC,kBAAkB;IAAEC;EAAK,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC1F,IAAI;IAAEG,UAAU,GAAGR,aAAa,CAACS,oBAAoB,CAAC,CAAC;IAAEC,aAAa;IAAE,GAAGC;EAAO,CAAC,GAAGX,aAAa,CAACY,oBAAoB,CAACX,UAAU,CAAC;EACpI,MAAMY,UAAU,GAAGb,aAAa,CAACc,QAAQ,CAAC,YAAY,CAAC;EACvD,IAAIX,kBAAkB,EAClBK,UAAU,GAAGL,kBAAkB;EACnC,MAAMY,UAAU,GAAG,EAAE;EACrB,MAAMC,kBAAkB,GAAGZ,IAAI,IAC3BJ,aAAa,CAACiB,cAAc,IAC5BjB,aAAa,CAACiB,cAAc,CAACC,QAAQ,CAAC,CAAC,CAACd,IAAI,CAAC;EACjD,KAAK,MAAMV,GAAG,IAAIiB,MAAM,EAAE;IACtB,MAAMQ,KAAK,GAAGnB,aAAa,CAACc,QAAQ,CAACpB,GAAG,CAAC;IACzC,MAAM0B,WAAW,GAAGT,MAAM,CAACjB,GAAG,CAAC;IAC/B,IAAI,CAACyB,KAAK,IACNC,WAAW,KAAKb,SAAS,IACxBS,kBAAkB,IACfxB,oBAAoB,CAACwB,kBAAkB,EAAEtB,GAAG,CAAE,EAAE;MACpD;IACJ;IACA,MAAM2B,eAAe,GAAG;MACpBnB,KAAK;MACLoB,OAAO,EAAE,CAAC;MACV,GAAGhC,kBAAkB,CAACkB,UAAU,IAAI,CAAC,CAAC,EAAEd,GAAG;IAC/C,CAAC;IACD;AACR;AACA;AACA;IACQ,IAAI6B,cAAc,GAAG,IAAI;IACzB,IAAIC,MAAM,CAACC,uBAAuB,IAAI,CAACN,KAAK,CAACO,WAAW,EAAE;MACtD,MAAMC,QAAQ,GAAG3B,aAAa,CAAC4B,QAAQ,CAAC,CAAC,CAAC1C,4BAA4B,CAAC;MACvE,IAAIyC,QAAQ,EAAE;QACVJ,cAAc,GAAG,KAAK;QACtBF,eAAe,CAACC,OAAO,GAAGE,MAAM,CAACC,uBAAuB,CAACE,QAAQ,EAAEjC,GAAG,EAAEyB,KAAK,EAAE5B,KAAK,CAAC;QACrF8B,eAAe,CAACQ,SAAS,GAAG,IAAI;MACpC;IACJ;IACA,IAAIC,OAAO,GAAGP,cAAc,IAAIH,WAAW,KAAKD,KAAK,CAACY,GAAG,CAAC,CAAC;IAC3D,IAAIV,eAAe,CAACjB,IAAI,KAAK,QAAQ,KAChCe,KAAK,CAACa,WAAW,CAAC,CAAC,IAAIX,eAAe,CAACY,QAAQ,CAAC,EAAE;MACnDH,OAAO,GAAG,KAAK;IACnB;IACA;AACR;AACA;AACA;AACA;IACQ,IAAIX,KAAK,CAACe,SAAS,EAAE;MACjBJ,OAAO,GAAG,KAAK;IACnB;IACA,IAAIA,OAAO,EACP;IACJX,KAAK,CAACgB,KAAK,CAAChD,kBAAkB,CAACO,GAAG,EAAEyB,KAAK,EAAEC,WAAW,EAAEpB,aAAa,CAACoC,kBAAkB,IAAInD,cAAc,CAACoD,GAAG,CAAC3C,GAAG,CAAC,GAC7G;MAAEU,IAAI,EAAE;IAAM,CAAC,GACfiB,eAAe,CAAC,CAAC;IACvB,MAAMa,SAAS,GAAGf,KAAK,CAACe,SAAS;IACjC,IAAI9C,uBAAuB,CAACyB,UAAU,CAAC,EAAE;MACrCA,UAAU,CAACyB,GAAG,CAAC5C,GAAG,CAAC;MACnBwC,SAAS,CAACK,IAAI,CAAC,MAAM1B,UAAU,CAAC2B,MAAM,CAAC9C,GAAG,CAAC,CAAC;IAChD;IACAqB,UAAU,CAAC0B,IAAI,CAACP,SAAS,CAAC;EAC9B;EACA,IAAIxB,aAAa,EAAE;IACfgC,OAAO,CAACC,GAAG,CAAC5B,UAAU,CAAC,CAACwB,IAAI,CAAC,MAAM;MAC/B7B,aAAa,IAAIrB,SAAS,CAACW,aAAa,EAAEU,aAAa,CAAC;IAC5D,CAAC,CAAC;EACN;EACA,OAAOK,UAAU;AACrB;AAEA,SAAShB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}